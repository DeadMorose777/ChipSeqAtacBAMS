#!/usr/bin/env python3
"""
–ë–µ—Ä—ë–º sample_table.tsv ‚Üí —Ñ–æ—Ä–º–∏—Ä—É–µ–º dataset.jsonl.

 ‚Ä¢ –æ–∫–Ω–æ WIN (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 200 bp) —Å–∫–æ–ª—å–∑–∏—Ç –ø–æ —É–∑–∫–∏–º –ø–∏–∫–∞–º ChIP-seq
 ‚Ä¢ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–∫–Ω–∞ –ø–∏—à–µ–º JSON-—Å—Ç—Ä–æ–∫—É
       {"cell_id":‚Ä¶, "seq":‚Ä¶, "atac":‚Ä¶, "chip":‚Ä¶}

   ‚Äì seq   : 200-bp-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ hg38
   ‚Äì atac  : mean-coverage –ø–æ ATAC-BW
   ‚Äì chip  : mean Fold-Enrichment –ø–æ ChIP-BW  (—Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)

 –í—Å–µ —Å—Ç—Ä–æ–∫–∏ –ø–∏—à—É—Ç—Å—è –≤ gzip-–∞—Ä—Ö–∏–≤ `dataset.jsonl`.
 –§–∞–π–ª –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π bw
 –∏–ª–∏ –æ–∫–Ω–æ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —Ö—Ä–æ–º–æ—Å–æ–º—ã.
"""
import os, json, gzip, warnings, pathlib
import multiprocessing as mp

import pandas as pd, numpy as np, pyBigWig, pyfaidx

WIN   = 200
ROOT  = pathlib.Path(__file__).resolve().parents[1]
GENOME= pathlib.Path(os.getenv("GENOME", ROOT / "hg38.fa"))
TSV   = ROOT / "sample_table.tsv"
OUT   = ROOT / "dataset.jsonl"

# ------------------ –≤—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã ------------------
fa  = pyfaidx.Fasta(str(GENOME))

tbl = pd.read_csv(TSV, sep="\t")
# –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å BigWig-–∏; –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äì –∫–ª–µ—Ç–∫–∞ –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è
bw_at, bw_ch = {}, {}
keep_rows = []

for r in tbl.itertuples():
    ok = True
    try:
        bw_at[r.cell_id] = pyBigWig.open(r.atac_bw)
    except Exception as e:
        warnings.warn(f"üü•  –Ω–µ—Ç ATAC-BW {r.atac_bw} ({e})")
        ok = False
    try:
        bw_ch[r.cell_id] = pyBigWig.open(r.chip_bw)
    except Exception as e:
        warnings.warn(f"üü•  –Ω–µ—Ç ChIP-BW {r.chip_bw} ({e})")
        ok = False
    if ok:
        keep_rows.append(r)

if not keep_rows:
    raise SystemExit("‚ùå  –ù–∏ –æ–¥–Ω–æ–π –ø–∞—Ä—ã ATAC+ChIP BigWig –Ω–µ –æ—Ç–∫—Ä—ã–ª–∞—Å—å")

print(f"‚úì –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ {len(keep_rows)} –∫–ª–µ—Ç–æ–∫ "
      f"(–∏–∑ {len(tbl)}) ‚Äì –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–±—Ä–æ—à–µ–Ω—ã")

# ----------------- –≤—Å–ø–æ–º-—Ñ—É–Ω–∫—Ü–∏–∏ -------------------
def peaks_path(chip_bw_path:str)->pathlib.Path:
    samp = pathlib.Path(chip_bw_path).stem.replace("_FE","")
    return ROOT / f"peaks/{samp}/{samp}_summits.bed"

def one_sample(r):
    cid   = r.cell_id
    peaks = peaks_path(r.chip_bw)
    res   = []

    if not peaks.exists():
        warnings.warn(f"‚ö†Ô∏è  –Ω–µ—Ç –ø–∏–∫–æ–≤ {peaks}")
        return res

    atac = bw_at[cid]
    chip = bw_ch[cid]

    with peaks.open() as fh:
        for ln in fh:
            chrom, start, *_ = ln.split()[:3]
            start  = int(start)
            center = start + WIN // 2
            left   = max(0, center - WIN // 2)
            right  = left + WIN

            # –æ–±—Ä–µ–∑–∞–µ–º –æ–∫–Ω–∞, –≤—ã—Ö–æ–¥—è—â–∏–µ –∑–∞ –∫–æ–Ω–µ—Ü —Ö—Ä–æ–º–æ—Å–æ–º—ã
            chr_len = len(fa[chrom])
            if right > chr_len:
                continue

            seq = fa[chrom][left:right].seq.upper()
            if len(seq) != WIN or "N" in seq:
                continue

            atac_val = atac.stats(chrom, left, right, type="mean")[0] or 0
            chip_val = chip.stats(chrom, left, right, type="mean")[0] or 0

            res.append({
                "cell_id": int(cid),
                "seq"    : seq,
                "atac"   : atac_val,
                "chip"   : chip_val
            })
    return res

# --------------- –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ --------------
with mp.Pool() as pool, gzip.open(OUT, "wt") as gz:
    total = 0
    for recs in pool.imap_unordered(one_sample, keep_rows):
        for r in recs:
            gz.write(json.dumps(r) + "\n")
            total += 1

print(f"‚úì dataset.jsonl –≥–æ—Ç–æ–≤ ‚Äì {total} –æ–∫–æ–Ω")
