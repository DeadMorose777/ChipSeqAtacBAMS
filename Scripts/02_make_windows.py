#!/usr/bin/env python
"""
–°–æ–∑–¥–∞—ë–º dataset.jsonl –∏–∑ sample_pairs.tsv.
–û–¥–Ω–æ –æ–∫–Ω–æ (WIN=200 bp) ‚Üí –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ json:
{"cell":937,"chrom":"chr1","start":123456,...,"chip":0.37,"atac":3.2}
"""

import json, random, warnings
from pathlib import Path
import pandas as pd, pyBigWig, pyfaidx, numpy as np

ROOT = Path(__file__).resolve().parents[1]
WIN  = 200
pairs = pd.read_csv(ROOT/'sample_pairs.tsv', sep='\t')

fa   = pyfaidx.Fasta(str(ROOT/'hg38.fa'))          # –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –æ–∫–æ–Ω
lengths = {c.len for c in fa.records.values()}

dst = ROOT/'dataset.jsonl'
dst.write_text("")          # –æ—á–∏—â–∞–µ–º

for _, row in pairs.iterrows():
    cell = row.cell_id
    chip_bw = ROOT/f"bw/{row.chip_id}_FE.bw"
    atac_bw = ROOT/f"bw/{row.atac_id}_ATAC.bw"

    try:
        bw_c = pyBigWig.open(str(chip_bw));  bw_a = pyBigWig.open(str(atac_bw))
    except RuntimeError as e:
        warnings.warn(f"üü•  cell {cell}: BigWig –æ—Ç–∫—Ä—ã—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Üí –ø—Ä–æ–ø—É—Å–∫ ({e})")
        continue

    # ------- —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∏–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º summits.bed) -------
    summits = ROOT/f"peaks/{row.chip_id}/{row.chip_id}_summits.bed"
    if not summits.exists():
        warnings.warn(f"üü•  –Ω–µ—Ç summits –¥–ª—è {row.chip_id} ‚Üí –ø—Ä–æ–ø—É—Å–∫ –∫–ª–µ—Ç–∫–∏")
        continue

    for ln in summits.open():
        chrom, summ, *_ = ln.split()
        start = int(summ) - WIN//2
        if start < 0: continue
        chip_val = bw_c.stats(chrom, start, start+WIN, type="mean")[0] or 0
        atac_val = bw_a.stats(chrom, start, start+WIN, type="mean")[0] or 0
        rec = dict(cell=int(cell), chrom=chrom, start=start,
                   chip=round(chip_val,3), atac=round(atac_val,3))
        dst.open("a").write(json.dumps(rec)+"\n")

    # ------- —Ñ–æ–Ω–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å -------
    for _ in range( len(open(summits).readlines()) ):
        chrom = random.choice(list(fa.keys()))
        max_start = fa[chrom].end - WIN - 1
        start = random.randint(0, max_start)
        chip_val = bw_c.stats(chrom, start, start+WIN, type="mean")[0] or 0
        atac_val = bw_a.stats(chrom, start, start+WIN, type="mean")[0] or 0
        rec = dict(cell=int(cell), chrom=chrom, start=start,
                   chip=round(chip_val,3), atac=round(atac_val,3),
                   background=1)
        dst.open("a").write(json.dumps(rec)+"\n")

    print(f"‚úì windows –¥–ª—è cell {cell}: {row.chip_id}/{row.atac_id}")

print(f"\n‚á¢ dataset.jsonl –≥–æ—Ç–æ–≤: {dst.stat().st_size/1e6:.1f} MB")
